# These are variables that define various imprtant elements which will be used later in script

BOX_IMAGE = "centos/7"
SETUP_MASTER = true
SETUP_NODES = true
NODE_COUNT = 2
MASTER_IP = "192.168.26.10"
NODE_IP_NW = "192.168.26."
POD_NW_CIDR = "10.244.0.0/16"
K8S_DASHBOARD = true

# Generate new using steps in README
KUBETOKEN = "b029ee.968a33e8d8e6bb0d"

# Kubernetes Master script starts here
# The kubemasterscript variable holds a HEREDOC style value that defines the script to be run on master server
$kubemasterscript = <<SCRIPT

# Since we are not sure if any past configuration was done on this system, we start with resetting everything
kubeadm reset

# Let's start setting up Kubernetes with kubeadm init command
# --apiserver-advertise-address binds the right IP address interface
# --pod-network-cidr defines the network IP range for flannel type network. Not applicable for weave
# --token is followed by the token mentioned here in this file, which can be changed

kubeadm init --apiserver-advertise-address=#{MASTER_IP} --pod-network-cidr=#{POD_NW_CIDR} --token #{KUBETOKEN} --token-ttl 0

# Setup command line environment variables so that kubectl commands can be used properly
mkdir -p $HOME/.kube
sudo cp -Rf /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Setup Networking with Weave, see more at https://www.weave.works/blog/weave-net-kubernetes-integration/
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

# Helm is a tool that allows you to install applications on Kubernetes in form of Helm Charts
# These charts are basically automated/scripted steps that once performed, can setup any application on kubernetes
# More information can be found at https://helm.sh/
# Now setting up Helm
curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get > install-helm.sh
chmod u+x install-helm.sh
./install-helm.sh

# Adding /usr/local/bin in Environment PATH variable, to bring helm command in PATH
export PATH=$PATH:/usr/local/bin
echo "export PATH=$PATH:/usr/local/bin" >> /etc/profile

# Install Tiller for Helm, which is basically the Helm server component
kubectl -n kube-system create serviceaccount tiller
kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
helm init --service-account tiller

# With this installation, CoreDNS seems to be crashing continuously, so to resolve that we use the following command
# More information available at https://kubernetes.io/docs/setup/independent/troubleshooting-kubeadm/#coredns-pods-have-crashloopbackoff-or-error-state
kubectl -n kube-system get deployment coredns -o yaml | sed 's/allowPrivilegeEscalation: false/allowPrivilegeEscalation: true/g' | kubectl apply -f -

SCRIPT
# Kubernetes Master script ends here

# Dashboard script starts here
# Kubernetes Dashboard is a web GUI component
# The kubedashscript variable holds a HEREDOC style value that defines the script to be run on master server to install dashboard
$kubedashscript= <<DASHSCRIPT

# Kubernetes Dashboard Setup
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended/kubernetes-dashboard.yaml

# Expose the service for Dashboard on the host machine for this docker container i.e. the master VM
kubectl proxy &
DASHSCRIPT
# Dashboard script ends here

# Minion / Node script starts here
# The kubeminionscript variable holds a HEREDOC style value that defines the script to be run on node servers
$kubeminionscript = <<MINIONSCRIPT

# Since we are not sure if any past configuration was done on this system, we start with resetting everything
kubeadm reset

# The node needs to join the master by using the token and the master ip
kubeadm join --discovery-token-unsafe-skip-ca-verification --token #{KUBETOKEN} #{MASTER_IP}:6443

MINIONSCRIPT
# Minion / Node script finishes here


Vagrant.configure("2") do |config|
  config.vm.box = BOX_IMAGE
  config.vm.box_check_update = false
  config.vm.provision :shell, :path => "install-centos.sh"
  config.vm.provider "virtualbox" do |l|
    l.cpus = 1
    l.memory = "1024"
  end

  config.hostmanager.enabled = true
  config.hostmanager.manage_guest = true
  # config.vm.network "public_network"

  if SETUP_MASTER
    config.vm.define "master" do |subconfig|
      subconfig.vm.hostname = "master"
      subconfig.vm.network :private_network, ip: MASTER_IP
      subconfig.vm.provider :virtualbox do |vb|
        vb.customize ["modifyvm", :id, "--cpus", "2"]
        vb.customize ["modifyvm", :id, "--memory", "2048"]
      end
      # Here we are calling the kubernetes master script that we earlier defined as a HEREDOC variable
      subconfig.vm.provision :shell, inline: $kubemasterscript
      if K8S_DASHBOARD
        # Here we are calling the kubernetes dashboard script that we earlier defined as a HEREDOC variable
        subconfig.vm.provision :shell, inline: $kubedashscript
        subconfig.vm.network "forwarded_port", guest: 8443, host: 8443
      end
    end
  end
  
  if SETUP_NODES
    (1..NODE_COUNT).each do |i|
      config.vm.define "node#{i}" do |subconfig|
        subconfig.vm.hostname = "node#{i}"
        subconfig.vm.network :private_network, ip: NODE_IP_NW + "#{i + 10}"
        # Here we are calling the kubernetes minion / node script that we earlier defined as a HEREDOC variable
        subconfig.vm.provision :shell, inline: $kubeminionscript
      end
    end
  end
end
